openapi: 3.0.3
info:
  title: Example OpenAPI Spec
  description: An example OpenAPI Spec
  contact:
    name: William Boyles
    url: https://example.com/contact
    email: wmboyle2@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://example.com
tags:
  - name: People
paths:
  /person:
    post:
      description: Create a new person
      operationId: createPerson
      tags:
        - People
      responses:
        "201":
          description: Successful response
          content:
            "application/json":
              schema:
                type: integer
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/person"
  /person/{id}:
    get:
      description: Get a person by ID
      operationId: getPerson
      tags:
        - People
      responses:
        "200":
          description: Successful response
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/person"
      parameters:
        - name: id
          in: path
          description: The ID of the person
          required: true
          schema:
            type: integer
components:
  schemas:
    person:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/name"
        age:
          type: integer
          minimum: 0
          maximum: 130
        address:
          $ref: "#/components/schemas/address"
        phone:
          type: string
          pattern: ^\+?[0-9]{10}$
      required:
        - name
        - age
    name:
      type: object
      properties:
        first:
          type: string
          minLength: 1
        middle:
          type: string
          minLength: 1
        last:
          type: string
          minLength: 1
      required:
        - first
        - last
    address:
      type: object
      properties:
        house_number:
          type: integer
          minimum: 1
        street:
          type: string
          minLength: 1
        city:
          type: string
          minLength: 3
        state:
          type: string
          pattern: ^[A-Z]{2}$
        zip:
          type: string
          pattern: ^\d{5}$
      required:
        - house_number
        - street
        - city
        - state
        - zip
